//$ ?= require './jquery/jquery-1.7.1.min'
var CELL_HEIGHT, CELL_WIDTH, CIRCLE_SEMIDIAMETER, DIALOG_HEIGHT, DIALOG_MAX_WIDTH, DIALOG_MIN_WIDTH, DIALOG_XBAR_HEIGHT, DIALOG_XBAR_WIDTH, DIALOG_YBAR_HEIGHT, DIALOG_YBAR_WIDTH, EverystudyManager, GRAPH_BAR, GRAPH_BAR_DISABLE, GRAPH_CIRCLE_FILL, GRAPH_CIRCLE_FILL_DISABLE, GRAPH_CIRCLE_LINE, GRAPH_CIRCLE_LINE_DISABLE, GRAPH_GUIDELINE_COLOR, Graph, GraphCore, GraphLabelBar, GraphScrollbar, HOF_WIDTH, HallOfFame, NORMAL_SCROLLING, Popup, SCROLLBAR_BUFFER, SCROLLING_WEIGHT, SIDE_BUFFER, TOPIC_LESSEN_NUM, USERNAME_LESSEN_NUM, XBar, XScrollbar, YBar, YScrollbar, isMSIE, kmanager, r;

if (!String.prototype.trim) {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  };
}

r = function(key, ...values) {
  var i, j, ref;
  switch (key) {
    case 'Participation':
      key = '참여';
      break;
    case "Let's study this together!":
      key = '%1에 참여하시면 다른 분들과 함께 이 과목의 진행상황을 공유할 수 있습니다.';
      break;
    case 'Hall of Fame':
      key = '명예의 전당';
      break;
    case 'Confirm':
      key = '확인';
      break;
    case 'Cancel':
      key = '취소';
      break;
    case 'Close':
      key = '닫기';
  }
  if (arguments.length > 1) {
    for (i = j = 1, ref = arguments.length; (1 <= ref ? j <= ref : j >= ref); i = 1 <= ref ? ++j : --j) {
      key = key.replace('%' + i, arguments[i]);
    }
  }
  return key;
};

$.ajaxSetup({
  cache: false
});

isMSIE = $.browser.msie != null;

CELL_WIDTH = 60;

CELL_HEIGHT = 25;

HOF_WIDTH = 160;

GRAPH_GUIDELINE_COLOR = 'rgb(221,221,221)';

GRAPH_BAR = 'rgb(221,221,221)';

GRAPH_CIRCLE_FILL = 'rgb(147,200,224)';

GRAPH_CIRCLE_LINE = 'rgb(147,200,224)';

GRAPH_BAR_DISABLE = 'rgb(220,220,220)';

GRAPH_CIRCLE_FILL_DISABLE = 'rgb(221,221,221)';

GRAPH_CIRCLE_LINE_DISABLE = 'rgb(221,221,221)';

SIDE_BUFFER = 50;

CIRCLE_SEMIDIAMETER = 5;

SCROLLBAR_BUFFER = 4;

SCROLLING_WEIGHT = 25;

NORMAL_SCROLLING = true;

USERNAME_LESSEN_NUM = 10;

TOPIC_LESSEN_NUM = 20;

DIALOG_MAX_WIDTH = 980;

DIALOG_MIN_WIDTH = 600;

DIALOG_HEIGHT = 500;

DIALOG_XBAR_WIDTH = 640;

DIALOG_XBAR_HEIGHT = 40;

DIALOG_YBAR_WIDTH = 180;

DIALOG_YBAR_HEIGHT = 450;

EverystudyManager = (function() {
  class EverystudyManager {
    constructor(selector1) {
      this.selector = selector1;
    }

    create(template) {
      var curtain;
      this.context = $('<div id="everystudy" class="dialog">' + template + '</div>');
      this.context.width(DIALOG_MAX_WIDTH);
      this.context.height(DIALOG_HEIGHT);
      curtain = new Curtain(this.context);
      curtain.destatic();
      this.context.data('curtain', curtain);
      $(document).on('click', this.context.selector + ' div.footer button.close', () => {
        this.context.hide();
        this.context.data('curtain').hide();
        return this.recover();
      });
      return DOMLoader.register(() => {
        return $(this.selector).replaceWith(this.context);
      });
    }

    recover() {
      return location.href = location.href.slice(0, location.href.indexOf('#'));
    }

    bind(selector) {
      $(window).on('resize', () => {
        var left;
        if (this.context.is(':visible')) {
          left = $('#cols div.wrapper').offset().left;
          return this.context.css('left', left + 'px')();
        }
      });
      return $(document).on('click', selector, (event) => {
        var left, mode, title;
        if (this.graph === void 0) {
          mode = $(event.target).attr('mode');
          this.graph = new Graph(this.context);
        }
        title = $(event.currentTarget).find('span.label').text();
        this.context.find('div.header strong').text(title.replace(' 참여중', ''));
        left = $('#cols div.wrapper').offset().left;
        this.graph.create();
        this.context.css('left', left + 'px').show();
        this.context.data('curtain').show();
        if ((location.href.indexOf('#everystudy')) === -1) {
          window.location.href += '#everystudy';
        }
        setTimeout(function() {
          return $(window).scrollTop($('header').height() + $('#main_menu').height());
        }, 100);
        return false;
      });
    }

  };

  EverystudyManager.prototype.context = void 0;

  EverystudyManager.prototype.graph = void 0;

  EverystudyManager.prototype.isChromeOnWindow = /^Win/.test(navigator.platform) && /Chrome/.test(navigator.userAgent);

  return EverystudyManager;

}).call(this);

Graph = (function() {
  class Graph {
    constructor(context) {
      var left;
      this.context = context;
      // mousewheel과 x/y 스크롤바의 동기화.
      $(document).on('mousewheel', '#graph_core', (event, delta, deltaX, deltaY) => {
        var changed, gap, left, num, tmp, top;
        if (event.shiftKey === true) {
          changed = Math.ceil(Math.abs(deltaX) * SCROLLING_WEIGHT);
          gap = this.graph.getSurplus('x');
          left = this.x.labelbar.current();
          if (NORMAL_SCROLLING) {
            if (deltaX > 0) {
              num = left - changed;
              if (num < 0) {
                num = 0;
              }
            } else {
              num = left + changed;
              if (num > gap) {
                num = gap;
              }
            }
          } else {
            if (deltaX > 0) {
              num = left + changed;
              if (num > gap) {
                num = gap;
              }
            } else {
              num = left - changed;
              if (num < 0) {
                num = 0;
              }
            }
          }
          Sync.fire('x', num);
        } else {
          changed = Math.ceil(Math.abs(deltaY) * SCROLLING_WEIGHT);
          gap = this.graph.getSurplus('y');
          top = this.y.labelbar.current();
          if (NORMAL_SCROLLING) {
            if (deltaY > 0) {
              num = top - changed;
              if (num < 0) {
                num = 0;
              }
            } else {
              num = top + changed;
              if (num > gap) {
                num = gap;
              }
            }
          } else {
            if (deltaY < 0) {
              num = top + changed;
              if (num > gap) {
                num = gap;
              }
            } else {
              num = top - changed;
              if (num < 0) {
                num = 0;
              }
            }
          }
          tmp = $('#y_bar ul').outerHeight() - $('#y_bar').height();
          Sync.fire('y', num > tmp ? tmp : num);
        }
        event.preventDefault();
        event.stopPropagation();
        return false;
      });
      left = this.context.offset().left;
      Sync.add('x-resize', (changed) => {
        return this.context.css('left', left + Math.ceil(changed / 2) + 'px');
      });
    }

    create() {
      var area;
      if (this.loaded) {
        this.graph.reposition();
        Sync.fire('x', 0);
        Sync.fire('y', 0);
        return $('#hall_of_fame').find('.wrapper').scrollTop(0);
      } else {
        // document.ready 전에 생성될 수 있는 것을 생성.
        area = this.context.find('.body');
        /*-------------------------------------------------
        debug = $ '<input type="checkbox">'
        debug.click (event) =>
        	@natural = $(event.target).prop('checked') is true
        	console.log @natural
        	return true

        @context.append debug
        -------------------------------------------------*/
        this.x.labelbar = new XBar(area);
        this.y.labelbar = new YBar(area);
        this.graph = new GraphCore(area, DIALOG_XBAR_WIDTH, DIALOG_YBAR_HEIGHT);
        return $(() => {
          var core_width, dragger;
          this.indicator = new ProcessIndicator(this.context);
          this.indicator.start();
          dragger = $('<div class="dragbar" draggable="true"></div>');
          dragger.appendTo(this.context);
          dragger.draggable({
            axis: 'x',
            drag: (event, ui) => {
              var w;
              w = dragger.width();
              if (ui.position.left > DIALOG_MAX_WIDTH - w) {
                this.context.width(DIALOG_MAX_WIDTH);
                Sync.fire('x-resize', 0);
                return $(event.target).css('left', DIALOG_MAX_WIDTH - w + 'px').draggable('option', 'disabled');
              } else if (ui.position.left < DIALOG_MIN_WIDTH - w) {
                this.context.width(DIALOG_MIN_WIDTH);
                Sync.fire('x-resize', DIALOG_MAX_WIDTH - DIALOG_MIN_WIDTH);
                return $(event.target).css('left', DIALOG_MIN_WIDTH - w + 'px').draggable('option', 'disabled');
              } else {
                this.context.width(ui.position.left + w);
                return Sync.fire('x-resize', DIALOG_MAX_WIDTH - 3 - ui.position.left, this.graph.case);
              }
            }
          });
          core_width = DIALOG_XBAR_WIDTH;
          Sync.add('x-resize', (changed) => {
            var width;
            width = core_width - changed;
            if (width > core_width) {
              width = core_width;
            }
            this.graph.case.width(width);
            return DIALOG_XBAR_WIDTH = width;
          });
          // 실제 데이터 call 후 그래프 생성. document.ready 후.
          return $.getJSON(base_url + 'everystudy/get_data_ajax/' + path_context + (topic_id ? '/' + topic_id : ""), (res) => {
            var bars, hof, users, x_scrollbar_enabled, y_scrollbar_enabled;
            this.topics = res.data.lecture;
            //title = dialog.dialog 'option', 'title'
            //title = title.replace /<span class="title">(.+)<\/span>/, '<span class="title">' + res.result.label + '</span>'
            //dialog.dialog 'option', 'title', title
            bars = res.data.bars;
            users = this.graph.create(bars, this.topics);
            // x/y축 생성
            x_scrollbar_enabled = this.graph.getSurplus('x') > 0;
            y_scrollbar_enabled = this.graph.getSurplus('y') > 0;
            this.y.labelbar.create(this.topics);
            this.x.labelbar.create(users);
            this.x.scrollbar = new XScrollbar(DIALOG_XBAR_WIDTH, 8);
            this.x.scrollbar.create(this.graph.width(true), y_scrollbar_enabled);
            this.x.scrollbar.bar.css('left', SCROLLBAR_BUFFER + 'px');
            if (!x_scrollbar_enabled) {
              this.x.scrollbar.disable();
            }
            this.y.scrollbar = new YScrollbar(8, DIALOG_YBAR_HEIGHT);
            this.y.scrollbar.create(this.graph.height(true), x_scrollbar_enabled);
            this.y.scrollbar.bar.css('top', SCROLLBAR_BUFFER + 'px');
            if (!y_scrollbar_enabled) {
              this.y.scrollbar.disable();
            }
            this.graph.bind(this.x.scrollbar, this.y.scrollbar);
            hof = new HallOfFame(area);
            hof.create(res.data.hof, HOF_WIDTH, DIALOG_YBAR_HEIGHT);
            this.loaded = true;
            return this.indicator.stop();
          });
        });
      }
    }

  };

  Graph.prototype.context = void 0;

  Graph.prototype.graph = void 0;

  Graph.prototype.hof = void 0;

  Graph.prototype.indicator = void 0;

  Graph.prototype.loaded = false;

  Graph.prototype.topics = [];

  Graph.prototype.x = {
    labelbar: void 0,
    scrollbar: void 0
  };

  Graph.prototype.y = {
    labelbar: void 0,
    scrollbar: void 0
  };

  return Graph;

}).call(this);

GraphCore = (function() {
  class GraphCore {
    constructor(area1, w1, h1) {
      this.area = area1;
      this.w = w1;
      this.h = h1;
      Sync.add('x', this);
      Sync.add('y', this);
    }

    reposition() {
      this.case.scrollLeft(0);
      return this.case.scrollTop(0);
    }

    create(data, topics1) {
      var container, h, w;
      this.topics = topics1;
      ga('send', 'event', 'Participation', 'everystudy_view', path_context + ', ' + document.title, {
        useBeacon: true
      });
      container = $(this.area);
      this.case = $('<div id="graph_core"/>').appendTo(container);
      this.wrapper = $('<div id="core_wrapper"/>');
      this.case.wrapInner(this.wrapper);
      this.case.width(this.w);
      this.case.height(this.h);
      w = CELL_WIDTH * (data.length - 1) + SIDE_BUFFER * 2;
      h = CELL_HEIGHT * this.topics.length;
      w = w > this.w ? w : this.w;
      h = h >= this.h ? h + CELL_HEIGHT : this.h;
      if (this.topics.length >= this.h / CELL_HEIGHT) {
        h += CELL_HEIGHT;
      }
      this.canvas = Raphael('core_wrapper', w, h);
      this.lines = this.drawGuideLines();
      this.drawData(data);
      this.reposition();
      return this.users;
    }

    lineUp(studied) {
      var data, i, j, k, len, len1, ref, study, topic;
      data = [];
      ref = this.topics;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        topic = ref[i];
        data[i] = null;
        for (k = 0, len1 = studied.length; k < len1; k++) {
          study = studied[k];
          if (topic.id === study.topic_id) {
            data[i] = topic;
          }
        }
      }
      return data;
    }

    getSurplus(type) {
      if (type === 'x') {
        return this.canvas.width - this.case.width();
      } else {
        return this.canvas.height - this.case.height();
      }
    }

    updateViewBox(type, value) {
      if (type === 'x') {
        return this.wrapper.scrollLeft(value);
      } else {
        return this.wrapper.scrollTop(value);
      }
    }

    // 가로선 guide line 긋기
    drawGuideLines() {
      var lines, path, y;
      y = 0;
      lines = this.canvas.set();
      while (CELL_HEIGHT * y < this.canvas.height) {
        path = this.canvas.path('M0,' + (CELL_HEIGHT * y - this.recorrect) + 'L' + this.canvas.width + ',' + (CELL_HEIGHT * y - this.recorrect));
        path.attr({
          'stroke': GRAPH_GUIDELINE_COLOR,
          'stroke-dasharray': '-'
        });
        lines.push(path);
        y++;
      }
      return lines;
    }

    // graph 그리기
    drawData(data) {
      var datum, i, j, len;
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        datum = data[i];
        this.drawBar(i, datum.user, datum.studied);
        this.users.push(datum.user);
      }
    }

    drawBar(col, user, studied) {
      var btn, circle, circle_fill_color, circle_line_color, circles, data, j, len, popup, rect, rect_color, ref, x, y, yorder, yorders;
      if (col === 0 && studied.length === 0 && (user.nickname == null)) {
        btn = $('<button>' + r('Participation') + '</button>').appendTo(this.wrapper);
        btn.click(() => {
          return this.register();
        });
        btn.css({
          'top': CELL_HEIGHT * 5 - Math.ceil(btn.height() / 2) + 'px',
          'left': SIDE_BUFFER - Math.ceil(btn.width() / 2) + 'px'
        });
        popup = new Popup(this.case);
        btn.mouseover(function() {
          return popup.open(btn);
        });
        btn.mouseout(function() {
          return popup.close();
        });
        Sync.add('y', {
          sync: (value) => {
            return btn.css('top', this.case.scrollTop() + CELL_HEIGHT * 5 - Math.ceil(btn.height() / 2) + 'px');
          }
        });
      }
      x = col * CELL_WIDTH + SIDE_BUFFER;
      yorders = [];
      circles = this.canvas.set();
      rect_color = typeof data !== "undefined" && data !== null ? GRAPH_BAR : GRAPH_BAR_DISABLE;
      rect = this.canvas.rect(x - this.recorrect, 0, 0.5, this.canvas.height);
      rect.attr({
        'fill': rect_color,
        'stroke-width': 0
      });
      ref = this.lineUp(studied);
      for (yorder = j = 0, len = ref.length; j < len; yorder = ++j) {
        data = ref[yorder];
        if (data != null) {
          y = (yorder + 1) * CELL_HEIGHT;
          circle_fill_color = data != null ? GRAPH_CIRCLE_FILL : GRAPH_CIRCLE_FILL_DISABLE;
          circle_line_color = data != null ? GRAPH_CIRCLE_LINE : GRAPH_CIRCLE_LINE_DISABLE;
          circle = this.canvas.circle(x - this.recorrect, y, CIRCLE_SEMIDIAMETER);
          circle.attr({
            'stroke-width': 1,
            'stroke': circle_line_color,
            'fill': circle_fill_color
          });
          circle.data('ynum', yorder);
          circle.click((() => {
            var url;
            url = base_url + path_context + (data.id ? '/' + data.id : '');
            return function() {
              return location.href = url;
            };
          })());
        }
      }
      circles.toFront();
    }

    width(core = false) {
      if (core) {
        return this.canvas.width;
      } else {
        return this.case.width();
      }
    }

    height(core = false) {
      if (core) {
        return this.canvas.height;
      } else {
        return this.case.height();
      }
    }

    syncX(value) {
      return this.updateViewBox('x', value);
    }

    syncY(value) {
      return this.updateViewBox('y', value);
    }

    bind(x_object, y_object) {
      x_object.bar.appendTo(this.case);
      y_object.bar.appendTo(this.case);
      x_object.reset();
      y_object.reset();
      this.case.mouseenter(function() {
        if (x_object.enabled) {
          x_object.show();
        }
        if (y_object.enabled) {
          return y_object.show();
        }
      });
      return this.case.mouseleave(function() {
        if (x_object.enabled && !x_object.pressed) {
          x_object.hide();
        }
        if (y_object.enabled && !x_object.pressed) {
          return y_object.hide();
        }
      });
    }

    //$(document).on 'mouseup', 'body', (event) ->
    //	bottom = $ event.target

    //	while bottom.attr('id') isnt 'everystudy'
    //		bottom = do bottom.parent

    //	bottom.prop 'nodeName' is 'BODY'
    register() {
      ga('send', 'event', 'Participation', 'everystudy_register', path_context + ', ' + document.title, {
        useBeacon: true
      });
      return $.ajax({
        url: base_url + '/everystudy/add_ajax/' + path_context,
        type: 'post',
        dataType: 'json',
        data: {
          'operation': 'register'
        },
        success: (response) => {
          var login;
          if (response.result === true) {
            return location.reload();
          } else {
            switch (response.errorCode) {
              case 1:
                login = LoginDialogManager.get();
                return login.show(true);
              case 2:
                return xalert(null, response.msg, {
                  'width': 230,
                  'stage': $('#everystudy'),
                  'modal': true
                });
            }
          }
        }
      });
    }

  };

  GraphCore.prototype.case = void 0;

  GraphCore.prototype.canvas = void 0;

  GraphCore.prototype.wrapper = void 0;

  GraphCore.prototype.recorrect = 0; //if isMSIE then 0 else 0.5

  GraphCore.prototype.users = [];

  GraphCore.prototype.lines = [];

  GraphCore.prototype.topics = [];

  return GraphCore;

}).call(this);

HallOfFame = (function() {
  class HallOfFame {
    constructor(selector1) {
      this.selector = selector1;
      this.hof = $('<div id="hall_of_fame"><strong class="title">' + r('Hall of Fame') + '</strong><div class="wrapper"><ul></ul></div></div>').appendTo(this.selector);
      this.title = this.hof.find('strong.title');
      this.wrapper = this.hof.find('.wrapper');
      this.list = this.wrapper.find('ul');
      Sync.add('hy', this);
      $(document).on('mousewheel', '#hall_of_fame div.wrapper ul', (event, delta, deltaX, deltaY) => {
        var changed, gap, num, top;
        changed = Math.ceil(Math.abs(deltaY) * SCROLLING_WEIGHT);
        gap = this.getSurplus();
        top = this.wrapper.scrollTop();
        if (NORMAL_SCROLLING) {
          if (deltaY > 0) {
            num = top - changed;
            if (num < 0) {
              num = 0;
            }
          } else {
            num = top + changed;
            if (num > gap) {
              num = gap;
            }
          }
        } else {
          if (deltaY < 0) {
            num = top + changed;
            if (num > gap) {
              num = gap;
            }
          } else {
            num = top - changed;
            if (num < 0) {
              num = 0;
            }
          }
        }
        Sync.fire('hy', num);
        event.preventDefault();
        event.stopPropagation();
        return false;
      });
    }

    create(persons, w, h) {
      var i, j, len, person, y_scrollbar_enabled;
      for (i = j = 0, len = persons.length; j < len; i = ++j) {
        person = persons[i];
        this.list.append('<li><img class="user_pict" src="' + person.user_pict + '" width="32" height="32" alt="" /><strong>' + person.nickname + '</strong><small><time>' + person.created + '</time></small></li>');
      }
      this.title.append('<span class="count">(' + persons.length + ')</span>');
      this.hof.width(w);
      this.wrapper.height(h - this.title.outerHeight());
      this.gap = this.list.height() - this.wrapper.height();
      y_scrollbar_enabled = this.gap > 0;
      if (y_scrollbar_enabled) {
        this.scrollbar = new YScrollbar(8, this.wrapper.height(), 'hy');
        this.scrollbar.create(this.list.height(), false);
        this.scrollbar.bar.css('top', this.title.outerHeight() + SCROLLBAR_BUFFER + 'px');
        this.hof.append(this.scrollbar.bar);
        this.wrapper.mouseenter(() => {
          return this.scrollbar.show();
        });
        return this.wrapper.mouseleave(() => {
          return this.scrollbar.hide();
        });
      }
    }

    getSurplus() {
      return this.list.height() - this.wrapper.height();
    }

    sync(value) {
      return this.wrapper.scrollTop(value);
    }

  };

  HallOfFame.prototype.gap = 0;

  HallOfFame.prototype.hof = void 0;

  HallOfFame.prototype.canvas = void 0;

  HallOfFame.prototype.case = void 0;

  HallOfFame.prototype.title = void 0;

  HallOfFame.prototype.list = void 0;

  HallOfFame.prototype.scrollbar = void 0;

  return HallOfFame;

}).call(this);

GraphLabelBar = (function() {
  class GraphLabelBar {
    constructor(area1) {
      this.area = area1;
    }

    style(data) {
      return this.bar.css(data);
    }

  };

  GraphLabelBar.prototype.bar = void 0;

  GraphLabelBar.prototype.inner = void 0;

  GraphLabelBar.prototype.cells = {};

  return GraphLabelBar;

}).call(this);

XBar = (function() {
  class XBar extends GraphLabelBar {
    constructor(area) {
      super(area);
      Sync.add('x', this);
      Sync.add('x-resize', () => {
        return this.bar.width($('#graph_core').width());
      });
    }

    reposition() {
      return this.bar.scrollLeft(0);
    }

    create(users) {
      var container, i, j, len, nickname, results, user;
      container = $(this.area);
      this.bar = $('<div id="x_bar" />').width(DIALOG_XBAR_WIDTH).appendTo(container);
      this.inner = $('<ul />').width(users.length * CELL_WIDTH + SIDE_BUFFER * 2).appendTo(this.bar);
      this.inner.append($('<li class="dummy"></li>').width(SIDE_BUFFER - CELL_WIDTH / 2));
      results = [];
      for (i = j = 0, len = users.length; j < len; i = ++j) {
        user = users[i];
        if (i > 0 && (user.nickname != null)) {
          nickname = user.nickname.trim();
          if (nickname.length > USERNAME_LESSEN_NUM + 1) {
            nickname = `<span title=\"${nickname}\">` + nickname.substring(0, USERNAME_LESSEN_NUM).trim() + '...</span>';
          }
          results.push(this.cells[user.id] = $(`<li>${nickname}</li>`).width(CELL_WIDTH).appendTo(this.inner));
        } else {
          nickname = 'You';
          results.push(this.cells[0] = $(`<li><strong>${nickname}</strong></li>`).width(CELL_WIDTH).appendTo(this.inner));
        }
      }
      return results;
    }

    current() {
      return this.bar.scrollLeft();
    }

    sync(value) {
      return this.bar.scrollLeft(value);
    }

  };

  XBar.prototype.wrapper = void 0;

  return XBar;

}).call(this);

YBar = (function() {
  class YBar extends GraphLabelBar {
    constructor(area) {
      super(area);
      Sync.add('y', this);
      this.tooltip = $('<span id="y_bar_tooltip"><a href="#" /></span>').hide();
      if (isMSIE) {
        this.tooltip.addClass('msie');
      }
      this.tooltip.mouseout(function(event) {
        return $(this).hide();
      });
      $(document).on('mouseover', '#y_bar ul li span.cell a[title]', (event) => {
        var offset, target;
        target = $(event.target);
        offset = target.position();
        this.tooltip.find('a').text(target.attr('title')).attr('href', target.attr('href'));
        this.tooltip.css({
          'top': offset.top + 'px',
          'left': offset.left + 'px'
        });
        return this.tooltip.show();
      });
      $(document).on('click', '#y_bar ul li span.cell a', (event) => {
        var link;
        link = $(event.currentTarget);
        if (!link.attr('title')) {
          location.href = link.attr('href');
        }
        return false;
      });
    }

    reposition() {}

    //@bar.scrollTop @inner.height() - @bar.height()
    create(topics) {
      var container, i, j, len, topic, topicname, url;
      container = $(this.area);
      container.append(this.tooltip);
      this.tooltip.css('z-index', 100 + parseInt(container));
      this.bar = $('<div id="y_bar" />').prependTo(container);
      this.bar.width(DIALOG_YBAR_WIDTH);
      this.bar.height(DIALOG_YBAR_HEIGHT);
      this.inner = $('<ul />').appendTo(this.bar);
      for (i = j = 0, len = topics.length; j < len; i = ++j) {
        topic = topics[i];
        url = base_url + path_context + (topic.id ? '/' + topic.id : '');
        topicname = topic.title.trim();
        if (this.isMSIE) {
          topicname = topicname.length > TOPIC_LESSEN_NUM ? `<a href=\"${url}\" title=\"${htmlspecialchars(topicname)}\" class=\"msie\">` + htmlspecialchars(topicname.substring(0, TOPIC_LESSEN_NUM).trim()) + '...</a>' : `<a href=\"${url}\" class=\"msie\">${htmlspecialchars(topicname)}</a>`;
        } else {
          topicname = topicname.length > TOPIC_LESSEN_NUM ? `<a href=\"${url}\" title=\"${htmlspecialchars(topicname)}\">` + htmlspecialchars(topicname.substring(0, TOPIC_LESSEN_NUM).trim()) + '...</a>' : `<a href=\"${url}\">${htmlspecialchars(topicname)}</a>`;
        }
        this.cells[topic.id] = $(`<li><span class=\"cell\">${topicname}</span></li>`).height(CELL_HEIGHT).appendTo(this.inner);
      }
      if (topics.length * CELL_HEIGHT >= this.h) {
        this.inner.height(topics.length * CELL_HEIGHT);
      }
      return this.inner.css({
        'padding-top': CELL_HEIGHT / 2 + 'px',
        'padding-bottom': CELL_HEIGHT / 2
      });
    }

    //@reposition()
    current() {
      return this.bar.scrollTop();
    }

    sync(value) {
      return this.bar.scrollTop(value);
    }

  };

  YBar.prototype.tooltip = void 0;

  return YBar;

}).call(this);

GraphScrollbar = class GraphScrollbar {
  constructor(w1, h1) {
    this.w = w1;
    this.h = h1;
    this.enabled = true;
    this.selector = void 0;
    this.bar = void 0;
    this.ball = void 0;
    this.pressed = false;
  }

  show() {
    return this.bar.fadeIn(200);
  }

  hide() {
    return this.bar.fadeOut(200);
  }

  enable() {
    return this.enabled = true;
  }

  disable() {
    return this.enabled = false;
  }

};

XScrollbar = class XScrollbar extends GraphScrollbar {
  constructor(w, h, type1 = "x") {
    super(w, h);
    this.type = type1;
    Sync.add(this.type, this);
  }

  create(canvas_w, y_enabled) {
    this.canvas_w = canvas_w;
    this.y_enabled = y_enabled;
    this.bar = $('<div id="' + this.type + '_scrollbar" class="scrollbar"/>');
    //@bar.addClass 'y_enabled' if y_enabled
    this.bar.mousedown(() => {
      return this.pressed = true;
    });
    this.bar.mouseup(() => {
      return this.pressed = false;
    });
    this.bar.width(this.w - 2 * SCROLLBAR_BUFFER);
    this.bar.height(this.h);
    this.ball = $('<div class="ball"/>').appendTo(this.bar);
    this.ball.css('opacity', 0.3);
    this.resize();
    Sync.add('x-resize', () => {
      return this.resize();
    });
    return this.ball.draggable({
      axis: 'x',
      containment: 'parent',
      scroll: false,
      drag: (event, ui) => {
        var ratio;
        ratio = ui.position.left / this.bar.width();
        return Sync.fire(this.type, Math.floor(this.canvas_w * ratio));
      }
    });
  }

  resize() {
    var width;
    this.ratio = this.canvas_w / this.w;
    width = this.w - (this.y_enabled ? 17 : 9);
    this.ball.width(Math.floor(width / this.ratio));
    return this.bar.width(width);
  }

  reset() {
    return this.ball.width(Math.floor(this.bar.width() / this.ratio));
  }

  sync(value) {
    var pos;
    pos = Math.floor(value / this.ratio);
    if (pos + this.ball.width() > this.bar.width()) {
      pos = this.bar.width() - this.ball.width();
    }
    return this.ball.css('left', pos + 'px');
  }

};

YScrollbar = class YScrollbar extends GraphScrollbar {
  constructor(w, h, type1 = "y") {
    super(w, h);
    this.type = type1;
    Sync.add(this.type, this);
  }

  create(canvas_h, x_enabled) {
    var container;
    this.canvas_h = canvas_h;
    this.x_enabled = x_enabled;
    container = $(this.selector);
    this.bar = $('<div id="' + this.type + '_scrollbar" class="scrollbar"/>');
    if (this.x_enabled) {
      this.bar.addClass('x_enabled');
    }
    this.bar.mousedown(() => {
      return this.pressed = true;
    });
    this.bar.mouseup(() => {
      return this.pressed = false;
    });
    this.bar.width(this.w);
    this.bar.height(this.h - 2 * SCROLLBAR_BUFFER);
    this.ball = $('<div class="ball"/>').appendTo(this.bar);
    this.ball.css('opacity', 0.3);
    this.resize();
    return this.ball.draggable({
      axis: 'y',
      containment: 'parent',
      scroll: false,
      drag: (event, ui) => {
        var ratio;
        ratio = ui.position.top / this.bar.height();
        return Sync.fire(this.type, Math.floor(this.canvas_h * ratio));
      }
    });
  }

  resize() {
    var height;
    this.ratio = this.canvas_h / this.h;
    height = this.h - (this.x_enabled ? 17 : 9);
    this.ball.height(Math.floor(height / this.ratio));
    return this.bar.height(height);
  }

  reset() {
    return this.ball.height(Math.floor(this.bar.height() / this.ratio));
  }

  sync(value) {
    return this.ball.css('top', Math.floor(value / this.ratio) + 'px');
  }

};

Popup = (function() {
  class Popup {
    constructor(position) {
      var label;
      label = position.parents('.dialog').find('div.header strong').text();
      this.info = $('<table id="dpop" class="popup"> <tbody><tr> <td id="topleft" class="corner"></td> <td class="top"></td> <td id="topright" class="corner"></td> </tr> <tr> <td class="left"></td> <td class="center">' + r("Let's study this together!", label) + '</td> <td class="right"></td> </tr> <tr> <td class="corner" id="bottomleft"></td> <td class="bottom"><img alt="" src="' + file_url + 'img/desktop/bubble_popup/bubble-tail2.png"/></td> <td id="bottomright" class="corner"></td> </tr> </tbody></table>').css('opacity', 0);
      $(document).ready(() => {
        return this.info.appendTo(position);
      });
    }

    open(btn) {
      var offset;
      if (this.isLocked() === false && this.isOpened() === false) {
        offset = $(btn).position();
        this.locked = true;
        this.info.css({
          'display': 'block',
          'top': offset.top - this.info.height() + 8 + 'px',
          'left': offset.left - Math.ceil((this.info.width() - btn.width()) / 2) + 'px'
        });
        return this.info.animate({
          top: XBar.height + offset.top - this.info.height() + 5 + 'px',
          opacity: 1
        }, this.time, 'swing', () => {
          return this.locked = false;
        });
      }
    }

    close() {
      if (this.isLocked() === false && this.isOpened() === true) {
        this.locked = true;
        return this.info.fadeOut(this.time, () => {
          return this.locked = false;
        });
      }
    }

    isLocked() {
      return this.locked;
    }

    isOpened() {
      return this.info.is(':visible');
    }

  };

  Popup.prototype.info = void 0;

  Popup.prototype.locked = false;

  Popup.prototype.time = 250;

  return Popup;

}).call(this);

kmanager = new EverystudyManager('#holder');

kmanager.create('<div class="wrapper"> <div class="pin"></div> <div class="header"> <strong>공동공부</strong> </div> <div class="body" id="_everystudy_id"> </div> <div class="footer"> <button class="close">' + r('Close') + '</button> </div> </div>');

kmanager.bind('#btn_everystudy');

if (window.location.hash === '#everystudy') {
  DOMLoader.register(() => {
    return $('#btn_everystudy').trigger('click');
  });
}
